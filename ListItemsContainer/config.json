{"slots":{"0":{"name":"slot10","type":{"events":[],"methods":[]}},"1":{"name":"slot9","type":{"events":[],"methods":[]}},"2":{"name":"slot8","type":{"events":[],"methods":[]}},"3":{"name":"slot7","type":{"events":[],"methods":[]}},"4":{"name":"slot6","type":{"events":[],"methods":[]}},"5":{"name":"slot5","type":{"events":[],"methods":[]}},"6":{"name":"slot4","type":{"events":[],"methods":[]}},"7":{"name":"slot3","type":{"events":[],"methods":[]}},"8":{"name":"slot2","type":{"events":[],"methods":[]}},"9":{"name":"slot1","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"core = nil\ndatabank = nil\nscreens = {}\nitemContainers = {}\nversion = \"20210114\"\n\nfor slotName, slot in pairs(unit) do\n    if\n        type(slot) == \"table\"\n        and type(slot.export) == \"table\"\n        and slot.getElementClass\n    then\n        if slot.getElementClass():lower():find(\"coreunit\") then\n            core = slot\n        end\n        if slot.getElementClass():lower() == 'screenunit' then\n            slot.slotName = slotName\n            table.insert(screens,slot)\n            table.sort(screens, function(left,right)\n               return left.getId() < right.getId()\n            end)\n        end\n        if slot.getElementClass():lower() == 'databankunit' then\n            databank = slot\n        end\n        if slot.getElementClass():lower() == 'itemcontainer' then\n            slot.slotName = slotName\n            table.insert(itemContainers,slot)\n            table.sort(itemContainers, function(left,right)\n               return left.getId() < right.getId()\n            end)\n        end\n    end\nend\n\nupdateStorage()\n--updateScreens()\nunit.setTimer('storageTimer', 30 * #itemContainers)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"for key, screen in ipairs(screens) do\n    screen.clear()\nend","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"1"},{"code":"updateStorage()\n--updateScreens()","filter":{"args":[{"value":"storageTimer"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},{"code":"-- [[ FUNCTIONS ]] --\nfunction updateStorage()\n    for key, itemContainer in ipairs(itemContainers) do\n        system.print('Acquire Storage : ' .. itemContainer.slotName)\n        itemContainer.acquireStorage()\n    end\n    updateScreens()\nend\n\nfunction itemQuantityConvert(item)\n    if item.type == \"material\" then\n        return volumeConvert(item.quantity)\n    end\n    \n    return string.format(\"%.0f\", item.quantity)\nend\n\nfunction volumeConvert(quantity)\n    local newQuantity = quantity\n    local prefix = ' '\n    \n    if (quantity > 1000) then\n        newQuantity = quantity / 1000\n        prefix = 'k'\n    end\n    \n    return string.format(\"%.2f %sL\", newQuantity, prefix)\nend\n\nfunction concatItem(itemsList, item)\n    for index, value in ipairs(itemsList) do\n        if value.name == item.name then\n            value.quantity = item.quantity + value.quantity\n            return\n        end\n    end\n\n    table.insert(itemsList,item)\nend\n\nfunction createItemContainerTable(itemContainer)\n    local htmlContent = \"\"\n    local htmlVolumeContent = \"\"\n    local itemsListsJson = itemContainer.getItemsList()\n    local items = json.decode(itemsListsJson)\n    local numRow = 1\n    local itemsList = {}\n    local filterType = \"material\" --export: Enter (material, element, nil) Filter by Type. \"nil\" for no filter\n\n    for key, item in ipairs(items) do\n        if filterType == nil or item.type == filterType then\n            concatItem(itemsList, item)\n        end\n    end\n    \n    table.sort(itemsList, function(left,right)\n       return left.quantity < right.quantity \n    end)\n    \n    for key, item in ipairs(itemsList) do\n    \thtmlContent = htmlContent .. string.format('<tr><td class=\"text-right\">%s</td><td>%s</td><td class=\"text-right\">%s</td><tr>', numRow, item.name, itemQuantityConvert(item))\n    \tnumRow = numRow + 1\n    end\n\n    htmlVolumeContent = string.format(\"Volume : %s/%s\", volumeConvert(itemContainer.getItemsVolume()), volumeConvert(itemContainer.getMaxVolume()))\n\n    return [[\n    <div class=\"item-table\">\n        <table>\n            <tr>\n            \t<th colspan=\"3\">]]..itemContainer.slotName..[[</th>\n            </tr>\n            <tr>\n                <th>#</th>\n                <th>Product</th>\n                <th>Quantity</th>\n            </tr>\n            \t]]..htmlContent..[[\n        </table>\n        <div class=\"item-table-volume\">]]..htmlVolumeContent..[[</div>\n    </div>]]\nend\n\nfunction updateScreens()\n    local tableByScreen = 6 --export: Enter (1-6) Table count by screen\n    local currentScreen = 1\n\n    for key, screen in ipairs(screens) do\n        --system.print('Update Screen : ' .. screen.slotName)\n        local itemContainerTableHtml = ''\n        local offset = currentScreen * tableByScreen\n\n        for key, itemContainer in ipairs({table.unpack(itemContainers, currentScreen, offset)}) do\n            itemContainerTableHtml = itemContainerTableHtml .. createItemContainerTable(itemContainer)\n        end\n\n        local html = [[\n        <style>\n            body {\n                margin: 0;\n                padding: 0;\n            }\n            table {\n                width: 100%;\n                margin-bottom: 1em;\n            }\n            table td {\n                padding-left: 5px;\n            }\n            .item-table {\n                font-size: 1.5em;\n                display: flex;\n                flex-direction: column;\n                justify-content: space-between;\n                flex-grow: 1;\n                margin: 10px;\n            }\n            .item-table th {\n                background-color: green;\n            }\n            .item-table-volume {\n                font-size: 1.1em;\n            }\n            .info {\n                padding: 15px 15px 0 15px;\n                font-size: 2em;\n                display: flex;\n                justify-content: space-between;\n            }\n            .main {\n                display: grid;\n                grid-template-columns: repeat(auto-fill, minmax(50vh, 1fr));\n                grid-gap: 15px;\n                height: calc(100vh - 2em - 15px);\n                grid-auto-flow: row;\n            }\n            .text-right {\n                text-align: right;\n            }\n            .text-left {\n                text-align: left;\n            }\n        </style>\n        <div class=\"info\">\n        \t<div>Last Update : ]].. epochTime() ..[[</div>\n             <div>Version : ]].. version ..[[</div>\n             <div>By YnotnA with ❤️</div>\n        </div>\n        <div class=\"main\">\n        \t]].. itemContainerTableHtml ..[[\n        </div>\n        ]]\n\n        screen.setHTML(html)\n        currentScreen = offset + 1\n    end\nend","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"3"},{"code":"--[[ epochTime function by Leodr (clock script), enhanced by Jericho (DU Industry script) ]]\nfunction epochTime()\n    function rZ(a)\n        if string.len(a) <= 1 then\n            return \"0\" .. a\n        else\n            return a\n        end\n    end\n    function dPoint(b)\n        if not (b == math.floor(b)) then\n            return true\n        else\n            return false\n        end\n    end\n    function lYear(year)\n        if not dPoint(year / 4) then\n            if dPoint(year / 100) then\n                return true\n            else\n                if not dPoint(year / 400) then\n                    return true\n                else\n                    return false\n                end\n            end\n        else\n            return false\n        end\n    end\n    local c = 5;\n    local d = 3600;\n    local e = 86400;\n    local f = 31536000;\n    local g = 31622400;\n    local h = 2419200;\n    local i = 2505600;\n    local j = 2592000;\n    local k = 2678400;\n    local l = {4, 6, 9, 11}\n    local m = {1, 3, 5, 7, 8, 10, 12}\n    local n = 0;\n    local o = 1506816000;\n    local q = system.getTime()\n    _G[\"formerTime\"] = q\n    if AddSummertimeHour == true then q = q + 3600 end\n    now = math.floor(q + o)\n    year = 1970;\n    secs = 0;\n    n = 0;\n    while secs + g < now or secs + f < now do\n        if lYear(year + 1) then\n            if secs + g < now then\n                secs = secs + g;\n                year = year + 1;\n                n = n + 366\n            end\n        else\n            if secs + f < now then\n                secs = secs + f;\n                year = year + 1;\n                n = n + 365\n            end\n        end\n    end\n    secondsRemaining = now - secs;\n    monthSecs = 0;\n    yearlYear = lYear(year)\n    month = 1;\n    while monthSecs + h < secondsRemaining or monthSecs + j < secondsRemaining or\n        monthSecs + k < secondsRemaining do\n        if month == 1 then\n            if monthSecs + k < secondsRemaining then\n                month = 2;\n                monthSecs = monthSecs + k;\n                n = n + 31\n            else\n                break\n            end\n        end\n        if month == 2 then\n            if not yearlYear then\n                if monthSecs + h < secondsRemaining then\n                    month = 3;\n                    monthSecs = monthSecs + h;\n                    n = n + 28\n                else\n                    break\n                end\n            else\n                if monthSecs + i < secondsRemaining then\n                    month = 3;\n                    monthSecs = monthSecs + i;\n                    n = n + 29\n                else\n                    break\n                end\n            end\n        end\n        if month == 3 then\n            if monthSecs + k < secondsRemaining then\n                month = 4;\n                monthSecs = monthSecs + k;\n                n = n + 31\n            else\n                break\n            end\n        end\n        if month == 4 then\n            if monthSecs + j < secondsRemaining then\n                month = 5;\n                monthSecs = monthSecs + j;\n                n = n + 30\n            else\n                break\n            end\n        end\n        if month == 5 then\n            if monthSecs + k < secondsRemaining then\n                month = 6;\n                monthSecs = monthSecs + k;\n                n = n + 31\n            else\n                break\n            end\n        end\n        if month == 6 then\n            if monthSecs + j < secondsRemaining then\n                month = 7;\n                monthSecs = monthSecs + j;\n                n = n + 30\n            else\n                break\n            end\n        end\n        if month == 7 then\n            if monthSecs + k < secondsRemaining then\n                month = 8;\n                monthSecs = monthSecs + k;\n                n = n + 31\n            else\n                break\n            end\n        end\n        if month == 8 then\n            if monthSecs + k < secondsRemaining then\n                month = 9;\n                monthSecs = monthSecs + k;\n                n = n + 31\n            else\n                break\n            end\n        end\n        if month == 9 then\n            if monthSecs + j < secondsRemaining then\n                month = 10;\n                monthSecs = monthSecs + j;\n                n = n + 30\n            else\n                break\n            end\n        end\n        if month == 10 then\n            if monthSecs + k < secondsRemaining then\n                month = 11;\n                monthSecs = monthSecs + k;\n                n = n + 31\n            else\n                break\n            end\n        end\n        if month == 11 then\n            if monthSecs + j < secondsRemaining then\n                month = 12;\n                monthSecs = monthSecs + j;\n                n = n + 30\n            else\n                break\n            end\n        end\n    end\n    day = 1;\n    daySecs = 0;\n    daySecsRemaining = secondsRemaining - monthSecs;\n    while daySecs + e < daySecsRemaining do\n        day = day + 1;\n        daySecs = daySecs + e;\n        n = n + 1\n    end\n    hour = 0;\n    hourSecs = 0;\n    hourSecsRemaining = daySecsRemaining - daySecs;\n    while hourSecs + d < hourSecsRemaining do\n        hour = hour + 1;\n        hourSecs = hourSecs + d\n    end\n    minute = 0;\n    minuteSecs = 0;\n    minuteSecsRemaining = hourSecsRemaining - hourSecs;\n    while minuteSecs + 60 < minuteSecsRemaining do\n        minute = minute + 1;\n        minuteSecs = minuteSecs + 60\n    end\n    second = math.floor(now % 60)\n    year = rZ(year)\n    month = rZ(month)\n    day = rZ(day)\n    hour = rZ(hour)\n    minute = rZ(minute)\n    second = rZ(second)\n\n    return hour..\":\".. minute..\":\".. second ..\"   \"..day..\"/\".. month..\"/\"..year\nend","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"4"}],"methods":[],"events":[]}